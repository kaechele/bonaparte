[tool.poetry]
name = "pybonaparte"
version = "0.3.0"
description = "Library to control Napoleon eFIRE enabled fireplaces"
authors = ["Felix Kaechele <felix@kaechele.ca>"]
license = "MIT"
readme = "README.md"
repository = "https://github.com/kaechele/bonaparte"
documentation = "https://bonaparte.readthedocs.io"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Topic :: Home Automation",
    "Topic :: Software Development :: Libraries",
]
packages = [
    { include = "bonaparte", from = "src" },
]

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/kaechele/bonaparte/issues"
"Changelog" = "https://github.com/kaechele/bonaparte/blob/main/CHANGELOG.md"

[tool.poetry.dependencies]
python = "^3.11"
bleak = { version = "^0.22.0", python = ">=3.10,<3.13" }
bleak-retry-connector = { version="^3.1.0", python = ">=3.10,<3.13" }
aenum = "^3.1.11"

[tool.poetry.group.dev.dependencies]
pytest = "^8.0.0"
pytest-cov = "^5.0.0"
pylint = "^3.0.0"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
myst-parser = ">=0.16"
sphinx = ">=4.0"
sphinxcontrib-nwdiag = "^2.0.0"
reportlab = "^4.0.0"
furo = "^2024.0.0"
pillow = "<10"

[tool.semantic_release]
logging_use_named_masks = true
branch = "main"
version_toml = ["pyproject.toml:tool.poetry.version"]
version_variables = [
    "src/bonaparte/__init__.py:__version__",
    "docs/conf.py:release",
]
build_command = "pip install poetry && poetry build"

[tool.pytest.ini_options]
addopts = "-v -Wdefault --cov=bonaparte --cov-report=term-missing:skip-covered"
pythonpath = ["src"]

[tool.coverage.run]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "@overload",
    "if TYPE_CHECKING",
    "raise NotImplementedError",
    'if __name__ == "__main__":',
]

[tool.mypy]
python_version = "3.12"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
mypy_path = "src/"
no_implicit_optional = true
show_error_codes = true
warn_unreachable = true
warn_unused_ignores = true
exclude = [
    'docs/.*',
    'setup.py',
]

[[tool.mypy.overrides]]
module = "tests.*"
allow_untyped_defs = true

[[tool.mypy.overrides]]
module = "docs.*"
ignore_errors = true

[tool.pylint.MAIN]
py-version = "3.12"
ignore = [
    "tests",
]
load-plugins = [
    "pylint.extensions.code_style",
    "pylint.extensions.typing",
]

[tool.pylint."MESSAGES CONTROL"]
disable = [
    "format",
    "not-context-manager",
    "too-few-public-methods",
    "too-many-ancestors",
    "too-many-arguments",
    "too-many-branches",
    "too-many-instance-attributes",
    "too-many-lines",
    "too-many-locals",
    "too-many-public-methods",
    "too-many-return-statements",
    "too-many-statements",
    "too-many-boolean-expressions",
    "unused-argument",
    "wrong-import-order",
]
enable = [
    "useless-suppression",
    "use-symbolic-message-instead",
]

[tool.pylint.FORMAT]
expected-line-ending-format = "LF"

[tool.ruff]
target-version = "py312"
exclude = ["docs", "setup.py"]

# Same as Black.
line-length = 88

[tool.ruff.lint]
# Let's tone this down once we release the first version
select = ["ALL"]
ignore = ["ANN101", "I001", "COM"]
unfixable = ["ERA"]

[tool.ruff.lint.flake8-import-conventions.extend-aliases]
voluptuous = "vol"
"homeassistant.helpers.area_registry" = "ar"
"homeassistant.helpers.config_validation" = "cv"
"homeassistant.helpers.device_registry" = "dr"
"homeassistant.helpers.entity_registry" = "er"
"homeassistant.helpers.issue_registry" = "ir"
"homeassistant.util.dt" = "dt_util"

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false

[tool.ruff.lint.flake8-tidy-imports.banned-api]
"async_timeout".msg = "use asyncio.timeout instead"
"pytz".msg = "use zoneinfo instead"

[tool.ruff.lint.isort]
force-sort-within-sections = true
combine-as-imports = true
split-on-trailing-comma = false

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]

[tool.ruff.lint.mccabe]
max-complexity = 25

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
